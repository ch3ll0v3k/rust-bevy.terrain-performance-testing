use std::f32::consts::PI;

use bevy::{
    color::palettes::tailwind::*,
    core_pipeline::{
        bloom::BloomSettings,
        dof::{DepthOfFieldMode, DepthOfFieldSettings},
        prepass::{DepthPrepass, NormalPrepass},
        tonemapping::Tonemapping,
        Skybox,
    },
    pbr::{
        wireframe::{Wireframe, WireframePlugin},
        CascadeShadowConfigBuilder, ExtendedMaterial, OpaqueRendererMethod,
    },
    prelude::*,
    render::{
        mesh::VertexAttributeValues,
        settings::{RenderCreation, WgpuFeatures, WgpuSettings},
        RenderPlugin,
    },
};
use bevy_panorbit_camera::{PanOrbitCamera, PanOrbitCameraPlugin};
// use noise::{BasicMulti, NoiseFn, Perlin, Seedable};
use noise::{BasicMulti, NoiseFn, Perlin};
mod water_material;
use water_material::*;

use bevy::diagnostic::FrameTimeDiagnosticsPlugin;

fn main() {
    App::new()
        .add_plugins((
            DefaultPlugins.set(RenderPlugin {
                render_creation: RenderCreation::Automatic(WgpuSettings {
                    features: WgpuFeatures::POLYGON_MODE_LINE,
                    ..default()
                }),
                ..default()
            }),
            WireframePlugin,
            PanOrbitCameraPlugin,
            MaterialPlugin::<ExtendedMaterial<StandardMaterial, WaterExtension>>::default(),
        ))
        .add_systems(Startup, startup)
        .add_systems(Update, toggle_wireframe)
        // .add_systems(Update, debug_projection)
        // .add_systems(Update, debug_transform)
        .add_plugins(FrameTimeDiagnosticsPlugin::default())
        .run();
}

const TERRAIN_HEIGHT: f32 = 70.0;
const TERRAIN_CHUNK_W: f32 = 1000.0 * 1.0;
const TERRAIN_CHUNK_H: f32 = 1000.0 * 1.0;
const TERRAIN_CHUNK_SCALLER: f64 = 300.0;
const TERRAIN_CHUNK_SUBDIVISIONS: u32 = 200 * 1;

fn generate_chunk() -> Mesh {
    let noise = BasicMulti::<Perlin>::default();

    let mut terrain = Mesh::from(
        Plane3d::default()
            .mesh()
            // .size(1000.0, 1000.0)
            // .subdivisions(20),
            .size(TERRAIN_CHUNK_W, TERRAIN_CHUNK_H)
            .subdivisions(TERRAIN_CHUNK_SUBDIVISIONS),
    );

    if let Some(VertexAttributeValues::Float32x3(positions)) =
        terrain.attribute_mut(Mesh::ATTRIBUTE_POSITION)
    {
        for pos in positions.iter_mut() {
            pos[1] = noise.get([
                pos[0] as f64 / TERRAIN_CHUNK_SCALLER,
                pos[2] as f64 / TERRAIN_CHUNK_SCALLER,
                0. as f64,
            ]) as f32
                * TERRAIN_HEIGHT;
        }

        let colors: Vec<[f32; 4]> = positions
            .iter()
            .map(|[_, g, _]| {
                let g = *g / TERRAIN_HEIGHT * 2.;

                // if g > 0.8 {
                if g > 0.8 {
                    (Color::LinearRgba(LinearRgba {
                        red: 20.,
                        green: 20.,
                        blue: 20.,
                        alpha: 1.,
                    }))
                    .to_linear()
                    .to_f32_array()
                // } else if g > 0.3 {
                } else if g > 0.3 {
                    Color::from(AMBER_800).to_linear().to_f32_array()
                // } else if g < -0.8 {
                } else if g < -0.2 {
                    Color::BLACK.to_linear().to_f32_array()
                } else {
                    Color::from(GREEN_400).to_linear().to_f32_array()
                }
            })
            .collect();
        terrain.insert_attribute(Mesh::ATTRIBUTE_COLOR, colors);

        terrain.compute_normals();
    }

    return terrain;
}

// https://bevy-cheatbook.github.io/3d/camera.html
#[derive(Component)]
struct MyCameraMarker;

fn startup(
    mut commands: Commands,
    mut meshes: ResMut<Assets<Mesh>>,
    // mut images: ResMut<Assets<Image>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
    mut water_materials: ResMut<Assets<ExtendedMaterial<StandardMaterial, WaterExtension>>>,
    asset_server: ResMut<AssetServer>,
) {
    commands.spawn((
        Camera3dBundle {
            transform: Transform::from_xyz(0.0, 20., 75.0)
                .looking_at(Vec3::new(0., 1., 0.), Vec3::Y),
            camera: Camera {
                hdr: true,
                ..default()
            },
            tonemapping: Tonemapping::TonyMcMapface,
            ..default()
        },
        MyCameraMarker,
    ));

    commands.spawn((
        // Skybox {
        //     brightness: 5000.0,
        //     image: asset_server.load(
        //         "skybox_cubemap/skybox_specular.ktx2",
        //     ),
        // },
        // EnvironmentMapLight {
        //     diffuse_map: asset_server
        //         .load("skybox_cubemap/skybox_diffuse.ktx2"),
        //     specular_map: asset_server.load(
        //         "skybox_cubemap/skybox_specular.ktx2",
        //     ),
        //     intensity: 2000.0,
        // },
        Skybox {
            brightness: 1000.0,
            image: asset_server
                .load("kloppenheim_06_puresky_4k_diffuse/kloppenheim_06_puresky_4k_specular.ktx2"),
        },
        EnvironmentMapLight {
            diffuse_map: asset_server
                .load("kloppenheim_06_puresky_4k_diffuse/kloppenheim_06_puresky_4k_diffuse.ktx2"),
            specular_map: asset_server
                .load("kloppenheim_06_puresky_4k_diffuse/kloppenheim_06_puresky_4k_specular.ktx2"),
            intensity: 1000.0,
        },
        BloomSettings::NATURAL,
        PanOrbitCamera::default(),
        DepthOfFieldSettings {
            mode: DepthOfFieldMode::Gaussian,
            focal_distance: 40.,
            aperture_f_stops: 1.0 / 8.0,
            ..default()
        },
        DepthPrepass,
        NormalPrepass,
    ));

    // directional 'sun' light
    commands.spawn(DirectionalLightBundle {
        directional_light: DirectionalLight {
            illuminance: light_consts::lux::OVERCAST_DAY,
            shadows_enabled: true,
            ..default()
        },
        transform: Transform {
            translation: Vec3::new(0.0, 2.0, 0.0),
            rotation: Quat::from_rotation_x(-PI / 4.),
            ..default()
        },
        // The default cascade config is designed to handle large scenes.
        // As this example has a much smaller world, we can tighten the shadow
        // bounds for better visual quality.
        cascade_shadow_config: CascadeShadowConfigBuilder {
            first_cascade_far_bound: 4.0,
            maximum_distance: 10.0,
            ..default()
        }
        .into(),
        ..default()
    });

    let terrain: Mesh = generate_chunk();

    commands.spawn((
        PbrBundle {
            mesh: meshes.add(terrain),
            material: materials.add(StandardMaterial {
                base_color: Color::WHITE,
                perceptual_roughness: 0.9,
                ..default()
            }),
            ..default()
        },
        Terrain,
    ));

    if false {
        // water
        let water = Mesh::from(
            Plane3d::default()
                .mesh()
                .size(TERRAIN_CHUNK_W, TERRAIN_CHUNK_H)
                .subdivisions(TERRAIN_CHUNK_SUBDIVISIONS),
        );

        commands.spawn(MaterialMeshBundle {
            mesh: meshes.add(water),
            transform: Transform::from_xyz(
                0.,
                -(TERRAIN_HEIGHT / 2.) + TERRAIN_HEIGHT * 6. / 16.,
                0.,
            ),
            material: water_materials.add(ExtendedMaterial {
                base: StandardMaterial {
                    clearcoat: 1.0,
                    clearcoat_perceptual_roughness: 0.3,
                    // clearcoat_normal_texture: Some(asset_server.load_with_settings(
                    //     "textures/ScratchedGold-Normal.png",
                    //     |settings: &mut ImageLoaderSettings| settings.is_srgb = false,
                    // )),
                    metallic: 0.9,
                    // mine
                    base_color: BLUE_400.into(),
                    perceptual_roughness: 0.2,
                    // can be used in forward or deferred mode.
                    opaque_render_method: OpaqueRendererMethod::Auto,
                    // in deferred mode, only the PbrInput can be modified (uvs, color and other material properties),
                    // in forward mode, the output can also be modified after lighting is applied.
                    // see the fragment shader `extended_material.wgsl` for more info.
                    // Note: to run in deferred mode, you must also add a `DeferredPrepass` component to the camera and either
                    // change the above to `OpaqueRendererMethod::Deferred` or add the `DefaultOpaqueRendererMethod` resource.
                    alpha_mode: AlphaMode::Blend,
                    ..default()
                },
                extension: WaterExtension { quantize_steps: 30 },
            }),
            ..default()
        });
    }
}

// fn debug_projection(query_camera: Query<&Projection, With<MyCameraMarker>>) {
//     let projection = query_camera.single();
//     match projection {
//         Projection::Perspective(persp) => {
//             // we have a perspective projection
//         }
//         Projection::Orthographic(ortho) => {
//             // we have an orthographic projection
//         }
//     }
// }

// static mut x: i32 = 0;
// fn debug_transform(query_camera: Query<&Transform, With<MyCameraMarker>>) {
//     unsafe {
//         x += 1;
//         if x % 100 == 0 {
//             let transform = query_camera.single();
//             println!(
//                 "cam: (:x, :y, :z) = ({}, {}, {})",
//                 transform.translation.x, transform.translation.y, transform.translation.z
//             );
//         }
//     }
// }

#[derive(Component)]
struct Terrain;

fn toggle_wireframe(
    mut commands: Commands,
    landscapes_wireframes: Query<Entity, (With<Terrain>, With<Wireframe>)>,
    landscapes: Query<Entity, (With<Terrain>, Without<Wireframe>)>,
    input: Res<ButtonInput<KeyCode>>,
) {
    for terrain in &landscapes {
        commands.entity(terrain).insert(Wireframe);
    }

    if input.just_pressed(KeyCode::Space) {
        for terrain in &landscapes {
            commands.entity(terrain).insert(Wireframe);
        }
        for terrain in &landscapes_wireframes {
            commands.entity(terrain).remove::<Wireframe>();
        }
    }
}
